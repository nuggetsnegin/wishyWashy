{"version":3,"sources":["firebase.js","components/Error.js","components/CreateWish.js","components/Support.js","components/SubmittedWish.js","components/DisplayWishes.js","components/Footer.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Error","className","onClick","this","props","closeError","Component","filter","require","CreateWish","handleInput","event","setState","wishInput","target","value","toggleError","showError","state","checkBadWords","clean","validateInput","trimmedWishInput","trim","length","handleSubmit","preventDefault","cleanedText","support","database","ref","push","wish","characterRemaining","onSubmit","htmlFor","rows","maxLength","type","onChange","placeholder","disabled","Support","supporting","dbRef","wishId","newSupportVal","child","update","console","log","role","aria-label","SubmittedWish","animationClass","randomBorderRadius","borderRandomizer","Math","floor","random","id","style","borderRadius","key","DisplayWishes","shuffleArray","wishesArray","i","randomized","wishes","on","snapshot","dbWishes","val","displayWishes","wishObject","mostRecentWish","reverse","shift","randomWishes","combinedWishes","slice","bubbleClasses","map","Footer","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8c47432.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/database'\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBf6WRp2Vfq9FTfvids02HOQHtYQWY6HAc',\n  authDomain: 'wishy-washy-7388d.firebaseapp.com',\n  databaseURL: 'https://wishy-washy-7388d.firebaseio.com',\n  projectId: 'wishy-washy-7388d',\n  storageBucket: 'wishy-washy-7388d.appspot.com',\n  messagingSenderId: '810419923918',\n  appId: '1:810419923918:web:5b7446d6139d0fe39ed99f'\n}\n\nfirebase.initializeApp(firebaseConfig)\n// this exports the CONFIGURED version of firebase\nexport default firebase\n","import React, { Component } from 'react';\n\nclass Error extends Component {\n\n  render(){\n\n    return (\n        <div className=\"errorMessage\">\n            <h2>Can't have an empty wish!</h2>\n            <button className=\"agreeButton\" onClick={this.props.closeError}>Okay!</button>\n        </div>\n    );\n\n  }\n}\n\nexport default Error","/* CREATEWISH.JS COMPONENT */\n/* Create a single 'wish' and loading it to the database. Rendering the text input field. */\nimport React, { Component } from 'react'\nimport firebase from '../firebase.js'\nimport Error from './Error'\n\nconst filter = require('leo-profanity') /* for filtering bad words */\n\nclass CreateWish extends Component {\n  constructor () {\n    super()\n    this.state = {\n      wishInput: '',\n      support: 0,\n      characterRemaining: 120,\n      showError: false /* for error pop up */\n    }\n  }\n\n  handleInput = event => {\n    this.setState({\n      wishInput: event.target.value\n    })\n  }\n\n  toggleError = () => {\n    this.setState({\n      showError: !this.state.showError /* toggling error */\n    })\n  }\n\n  checkBadWords = () => {\n    const wishInput = this.state.wishInput\n    let cleanedUp = filter.clean(wishInput, '💢')\n\n    return cleanedUp\n  }\n\n  validateInput = wishInput => {\n    const trimmedWishInput = wishInput.trim() /* avoid white space ~ user inputting empty wish */\n    /* check if input not empty and *check if wish under char length */\n    if (trimmedWishInput !== '' && wishInput.length > 0) {\n      return trimmedWishInput\n    } else {\n      /* disable button */\n      this.toggleError()\n      return false\n    }\n  }\n\n  handleSubmit = event => {\n    /* stop refresh on button click */\n    event.preventDefault()\n\n    /* grabbing the current state of wish and calling checkBadwords and setting it to a new variable called wishToBeAdded also setting current state of support to support to push to db */\n\n    const validatedInput = this.validateInput(this.state.wishInput)\n\n    if (validatedInput) {\n      const cleanedText = this.checkBadWords()\n\n      /* support is always 0 on creation so maybe not necessary */\n      const support = this.state.support\n\n      const dbRef = firebase.database().ref() /* db reference */\n      dbRef.push({\n        wish: cleanedText,\n        support: support\n      })\n      this.setState({\n        wishInput: '' /* making input field empty on submit */\n      })\n    }\n  }\n\n  render () {\n    return (\n      <div className='inputContainer'>\n        {this.state.showError ? <Error closeError={this.toggleError} /> : null}\n        <div className='input'>\n          <form onSubmit={this.handleSubmit}>\n            <label htmlFor='wishInput' />\n\n            <textarea\n              rows='6'\n              maxLength={120}\n              type='text'\n              value={this.state.wishInput}\n              onChange={this.handleInput}\n              placeholder='I wish I could own 3 cats someday!'\n            />\n            <div className='buttonWrapper'>\n              <p>Wish Words Remaining: {this.state.wishInput.length}/120</p>\n\n              <button\n                className='wishButton ripple'\n                type='submit'\n                disabled={!this.state.wishInput || this.state.showError}\n              >\n                Submit Wish\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default CreateWish\n","import React, { Component } from 'react'\nimport firebase from '../firebase.js'\n/* SUPPORT.JS - checking how many times a support has been issued (user clicks!) and rendering the result */\n\nclass Support extends Component {\n  constructor (props) {\n    super(props) /* preserving props from overriding constructor */\n    this.state = {\n      support: this.props.support\n    }\n  }\n  /* DbKey and Support => Update Wish of this dbKey with this support number */\n  supporting = () => {\n    const dbRef = firebase.database().ref()\n    const { wishId } = this.props\n    const newSupportVal = this.state.support + 1\n    this.setState({\n      support: newSupportVal\n    })\n\n    dbRef.child(wishId).update({ support: newSupportVal })\n\n    console.log('support state', this.state.support)\n    console.log('support props', this.props.support)\n  }\n\n  /* rendering support number and button */\n  render () {\n    /* only need theWishId and support to increment support # */\n    return (\n      <div className='displaySupport'>\n        <button className='supportButton' onClick={this.supporting}>\n          <div className='heartWrapper'>\n            <span className='heart' role='img' aria-label='heart emoji'>\n              💙\n            </span>\n            {this.state.support}\n          </div>\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default Support\n","/* SUBMITTEDWISH.JS - read only component, finished wish */\nimport React, { Component } from 'react'\nimport Support from './Support'\n\nclass SubmittedWish extends Component {\n  render () {\n    const {\n      wishId,\n      wish,\n      support,\n      animationClass\n    } = this.props /* destructing props from displayWishes */\n    \n    /*made variables because of array destructuring error :( */\n    const randomBorder1 = '40% 60% 48% 52% / 60% 61% 39% 40%';\n    const randomBorder2 = '40% 60% 59% 41% / 45% 48% 52% 55%';\n    const randomBorder3 = '52% 48% 45% 55% / 56% 49% 51% 44%';\n    const randomBorder4 = '52% 48% 57% 43% / 39% 59% 41% 61%';\n    const randomBorder5 ='52% 48% 68% 32% / 56% 58% 42% 44%';\n    const randomBorder6 ='45% 55% 31% 69% / 47% 44% 56% 53%';\n    const randomBorder7 = '34% 66% 49% 51% / 63% 57% 43% 37%';\n\n    /*randomizing border radius*/\n    const randomBorderRadius = [randomBorder1, randomBorder2, randomBorder3, randomBorder4, randomBorder5, randomBorder6, randomBorder7];\n    const borderRandomizer = Math.floor(Math.random() * randomBorderRadius.length);     // returns a random integer from 0 to 9 \n    \n    \n    return (\n      <div className={animationClass + ' ' + 'bubblePosition'} id={wishId}>\n        <li className='wobble' style={{borderRadius: randomBorderRadius[borderRandomizer]}}>{wish}</li>   \n        <Support support={support} key={wishId} wishId={wishId} />\n      </div>\n    )\n  }\n}\n\nexport default SubmittedWish\n","/* DISPLAYWISHES.JS */\nimport React, { Component } from 'react'\nimport SubmittedWish from './SubmittedWish'\nimport firebase from '../firebase.js'\n\nclass DisplayWishes extends Component {\n  constructor () {\n    super()\n    this.state = {\n      wishes: [] /* empty because we're loading from db */\n    }\n  }\n\n  /* connecting to db */\n  componentDidMount () {\n    const dbRef = firebase.database().ref()\n\n    dbRef.on('value', snapshot => {\n      const dbWishes = snapshot.val()\n      const displayWishes = [] /* using thsi to display shit */\n\n      /* for in loop to grab db info and put it into an object */\n      for (let key in dbWishes) {\n        const wishObject = {\n          wishId: key,\n          wish: dbWishes[key].wish,\n          support: dbWishes[key].support\n        }\n        displayWishes.push(wishObject)\n      }\n\n      const mostRecentWish = displayWishes\n        .reverse()\n        .shift() /* needed to show the users first wish on screen and not have it randomized */\n      const randomWishes = this.shuffleArray(displayWishes)\n\n      /* grabs the most recent wish and 9 random ones using destructuring so we dont return an object */\n      const combinedWishes = [mostRecentWish, ...randomWishes.slice(0, 9)]\n\n      this.setState({\n        wishes: combinedWishes /* recent users wish and 9 random */\n      })\n    })\n  }\n\n  shuffleArray = wishesArray => {\n    for (let i = wishesArray.length - 1; i > 0; i--) {\n      const randomized = Math.floor(Math.random() * i + 1)\n      ;[wishesArray[i], wishesArray[randomized]] = [\n        wishesArray[randomized],\n        wishesArray[i]\n      ]\n    }\n    return wishesArray\n  }\n\n  render () {\n    /* for assigning random x1-x10 class for bubble animations on user wishes */\n    const bubbleClasses = [\n      'x1',\n      'x2',\n      'x3',\n      'x4',\n      'x5',\n      'x6',\n      'x7',\n      'x8',\n      'x9',\n      'x10'\n    ]\n    const wishes = this.state.wishes\n\n    return (\n      <div className='wishDisplay'>\n        <ul>\n          {/* map through object so we can render it */}\n          {wishes.map((wish, i) => {\n            return (\n              /* passing props to submittedWish component from wishObject */\n              <SubmittedWish\n                animationClass={bubbleClasses[i]}\n                key={i}\n                wishId={wish.wishId}\n                wish={wish.wish}\n                support={wish.support}\n              />\n            )\n          })}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default DisplayWishes\n","import React, { Component } from 'react'\n\nclass Footer extends Component {\n  render () {\n    return (\n      <footer className='footer'>\n        <p>\n          <span role='img' aria-label='fish emoji'>\n            🐟\n          </span>{' '}\n          Made with big wishes by <span>Negin Sauermann</span> ©️ 2019{' '}\n          <span role='img' aria-label='fish emoji' className='ripple'>\n            🐟\n          </span>\n        </p>\n      </footer>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\n\nclass Header extends Component {\n  render () {\n    return (\n      <header className='header'>\n        <h1 className='knockout'>Wishy Washy</h1>\n      </header>\n    )\n  }\n}\n\nexport default Header\n","import React, { Component } from 'react';\nimport './styles/App.css';\nimport CreateWish from './components/CreateWish';\nimport DisplayWishes from './components/DisplayWishes';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n\nclass App extends Component {\n\n  render(){\n\n    return (\n    <div className=\"App\">\n        <Header />\n        <div className=\"wrapper\">\n        <div className=\"introduction\">\n              <p>Hi there, I see you want to make a <span>wish</span> well.. just type one in! If you're too shy to share, feel free to <span>like</span> other people's wishes!</p>\n        </div>\n          <main>\n            <CreateWish />\n            <DisplayWishes />\n          </main>\n        </div>\n        <Footer />\n      </div>\n    );\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}